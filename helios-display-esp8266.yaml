esphome:
  name: helios-display-esp8266
  friendly_name: Helios Display esp8266

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "DSG8sBAFoNvRtA8UCcRwuEIjD3wV3lXDxv3uBTlIr/4="

ota:
  - platform: esphome
    password: "09bbbd43d9bd3cf701ab4c327918fe34"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Helios-Display-Esp8266"
    password: "momo1234"
  on_connect:
    - lambda: 'id(wifi_ok) = true;'
  on_disconnect:
    - lambda: 'id(wifi_ok) = false;'


captive_portal:

i2c:
  sda: D2
  scl: D1
  scan: true
  frequency: 100kHz

##################################################################################
## home assistant sensors

binary_sensor:
  - platform: gpio
    pin:
      number: D7
      mode: INPUT_PULLUP
      inverted: true
    name: "Encoder Button"
    id: encoder_button

sensor:
  # Rotary encoder
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: my_encoder
    pin_a:
      number: D5
      mode: INPUT_PULLUP
    pin_b:
      number: D6
      mode: INPUT_PULLUP
    resolution: 4

  # Fan level 0..4
  - platform: homeassistant
    id: ha_fan_level
    entity_id: sensor.helios_ec_pro_lufterstufe

  # Weather temps (floats in °C)
  - platform: homeassistant
    id: s_weather_temp
    entity_id: sensor.openweathermap_temperature    
    internal: true

  - platform: homeassistant
    id: s_weather_like
    entity_id: sensor.openweathermap_feels_like_temperature  
    internal: true

  # Duct temps (0.1°C integers like your Arduino; if floats, see note below)
  - platform: homeassistant
    id: s_t_outdoor      # sensor_tAussen
    entity_id: sensor.helios_ec_pro_aussenlufttemperatur 
    internal: true
  - platform: homeassistant
    id: s_t_exhaust      # sensor_tFortluft
    entity_id: sensor.helios_ec_pro_fortlufttemperatur            
    internal: true
  - platform: homeassistant
    id: s_t_supply       # sensor_tZuluft
    entity_id: sensor.helios_ec_pro_zulufttemperatur
    internal: true
  - platform: homeassistant
    id: s_t_extract      # sensor_tAbluft
    entity_id: sensor.helios_ec_pro_ablufttemperatur
    internal: true


globals:
  - id: wifi_ok
    type: bool
    initial_value: 'false'

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Device IP"
      id: ip_addr



# OLED display — SH1106 (I²C)
display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    contrast: 60% 
    rotation: 0
    lambda: |-
      // ===== Helpers ==========================================================
        // For TEXT sensors
        auto print_txt = [&](int x, int y, esphome::text_sensor::TextSensor *t, const char* suffix = ""){
          if (t && t->has_state() && !t->state.empty())
            it.printf(x, y, id(robotoS), "%s%s", t->state.c_str(), suffix);
          else
            it.printf(x, y, id(robotoS), "--");
        };

      // Print a numeric sensor; font is the last arg
      auto print_num = [&](int x, int y, esphome::sensor::Sensor *s, const char* suffix, esphome::font::Font *F) {
        if (s && s->has_state())
          it.printf(x, y, F, "%.1f%s", (float)s->state, suffix);
        else
          it.printf(x, y, F, "--");
      };

      // convert fan level
      //int lvl = 0;
      //if (id(ha_fan_level).has_state()) {
      //  float raw = id(ha_fan_level).state;   // e.g., 0..4
      //  lvl = (int)roundf(raw);
      //  if (lvl < 0) lvl = 0;
      //  if (lvl > 4) lvl = 4;
      //}

      // --------------------------------------------//
      // --------------------------------------------//
      // ------ widgets -----------------------------//      
      
      // ===== Widget: weather now   ===================
      auto draw_weather = [&](int x, int y){  

        // weather real temp
        print_num(x + 14,  y + 10, id(s_weather_temp), "", robotoL);

        // weather feels-like
        it.printf(x + 0,  y + 30, id(robotoL), "~");
        print_num(x + 10,  y + 26, id(s_weather_like), "", robotoXL);
        it.printf(x + 0,   y + 6, id(robotoM), "°C");
      };

      // ===== Widget: temperatures KWL   ===================
      auto draw_kwltemp = [&](int x, int y){  
        // it.printf(x + 0,    y + 45, id(sym_10), "🡒");
        print_num(x + 1,   y + 45, id(s_t_outdoor), "", robotoS); //1
        print_num(x + 30,   y + 45, id(s_t_supply),  "", robotoS); //2
        it.printf(x + 55,   y + 43, id(sym_12), "⎔"); 
        print_num(x + 74,   y + 45, id(s_t_extract), "", robotoS); //3        
        print_num(x + 102,  y + 45, id(s_t_exhaust), "", robotoS); //4
        // it.printf(x + 140,  y + 45, id(sym_10), "🡒");
      };

      // ===== Widget: FanBars ==================================================
      auto draw_fanbars = [&](int x, int y, int level){
        it.rectangle       (x + 0,  y + 12,  9,  12);
        it.rectangle       (x + 11, y + 8,  9,  16);
        it.rectangle       (x + 22, y + 4,   9,  20);
        it.rectangle       (x + 33, y + 0,   9,  24);
        if (level > 0) it.filled_rectangle(x + 0,  y + 12, 9, 12);
        if (level > 1) it.filled_rectangle(x + 11, y + 8,  9, 16);
        if (level > 2) it.filled_rectangle(x + 22, y + 4,  9, 20);
        if (level > 3) it.filled_rectangle(x + 33, y + 0,  9, 24);
        // it.filled_rectangle(x + 0,  y + 38, 42, 3);
        // it.printf(x + 1, y + 27, id(robotoS), COLOR_OFF, "momomomo");

        it.printf(x + 0, y + 0, id(robotoS), "AUTO");

      };

      const int xf = 85;
      const int yf = 18;

      const int xt1 = 2;
      const int yt1 = 7;

      const int xw = 0; 
      const int yw = 0;

      draw_fanbars(xf, yf, (int)id(ha_fan_level).state);
      draw_kwltemp(xt1, yt1);
      draw_weather(xw, yw);

font:
  - file: "gfonts://Roboto"
    id: robotoS
    size: 10
    glyphs: " 0123456789.-°%:/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~<>"
  - file: "gfonts://Roboto"
    id: robotoM
    size: 12
    glyphs: " 0123456789.-°%:/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~<>"
  - file: "gfonts://Roboto"
    id: robotoL
    size: 15
    glyphs: " 0123456789.-°%:/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~<>"
  - file: "gfonts://Roboto"
    id: robotoXL
    size: 20
    glyphs: " 0123456789.-°%:/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~<>"

  # Symbols font (arrows, triangles, checkmarks)
  - id: sym_10
    file: "gfonts://Noto Sans Symbols 2"
    size: 10
    glyphs: "▲▶▼◀✓✗🠊🠶🆭⏩▦🡒⎔🠘"
  - id: sym_12
    file: "gfonts://Noto Sans Symbols 2"
    size: 12
    glyphs: "▲▶▼◀✓✗🠊🠶🆭⏩▦🡒⎔🠘"